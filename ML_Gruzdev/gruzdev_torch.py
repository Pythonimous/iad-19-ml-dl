# -*- coding: utf-8 -*-
"""Gruzdev Torch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vE4aBjJekLoJYeR2ucORxnrR8gxzcUyy
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms, datasets
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter

import model

import argparse
import numpy as np
import datetime

from tqdm import tqdm

class MLP(nn.Module):
    def __init__(self, num_classes):
        super(MLP, self).__init__() # родительский класс? конструктор?
        self.num_classes = num_classes
        self.fc1 = nn.Linear(784, 100)
        self.fc2 = nn.Linear(100, 50)
        self.fc3 = nn.Linear(50, num_classes)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

class CNN(nn.Module):
    def __init__(self, num_classes):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(1,3,3, stride=2)
        self.conv2 = nn.Conv2d(3,9,3)
        self.conv3 = nn.Conv2d(9,18,3)
        self.classifier = nn.Linear(1458, num_classes)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.relu(self.conv2(x))
        x = F.relu(self.conv3(x))
        x = self.classifier(x)
        return x

def evaluate(model, test_loader, criterion):
    model.eval()
    with torch.no_grad():
        avg_loss = 0.0
        val_acc = 0
        for x, y in test_loader:
            out = model(x)
            loss = criterion(out, y)
            _, pred = torch.max(out.data, 1)
            val_acc += (pred == y).numpy().mean()
            avg_loss += loss.item()
        avg_loss /= len(test_loader)
        val_acc /= len(test_loader)
        
    model.train()
    return avg_loss, val_acc

def train(args):

    net = getattr(model, args.type)(args.num_classes)

    data_train = datasets.FashionMNIST('./data/', train=True, transform=transforms.ToTensor(), download=True)
    data_test = datasets.FashionMNIST('./data/', train=False, transform=transforms.ToTensor())
    print(f'Train size: {len(data_train)}, Test size: {len(data_test)}')

    writer = SummaryWriter(f'./logs/{datetime.datetime.now()}')

    train_loader = DataLoader(data_train, num_workers = 8, batch_size = 32)
    test_loader = DataLoader(data_test, num_workers = 4, batch_size = 16)
    net = MLP(args.num_classes)
    writer.add_graph(net, torch.zeros(1,1,28,28))

    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(net.parameters(), lr=args.lr)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=2, gamma=0.1)

    i = 0

    for e in range(args.epochs):
        net.train()
        print(f'Current epoch: {e+1}')

        for i, (x, y) in enumerate(train_loader):
            optimizer.zero_grad()
            out = net(x)

            loss = criterion(out, y)
            loss.backward()
            optimizer.step()
            writer.add_scalar('Train/Loss', loss.item(), e*len(train_loader) + i)
            writer.add_scalar('Train/LR', scheduler.get_lr()[0], e*len(train_loader) + i)
            if i % args.print_every == 0:
                print(f'Epoch: {e+1}, Iteration: {i}, Loss: {loss.item()}')
                val_loss, val_acc = evaluate(net, test_loader, criterion)
                print(f'Val Loss: {val_loss}, Val Acc: {val_acc}')

                writer.add_scalar('Val/Loss', val_loss, e*len(train_loader) + i)
                writer.add_scalar('Val/Acc', val_acc, e*len(train_loader) + i)
        scheduler.step()

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description='Training scrpit for FashionMNIST.')
    parser.add_argument('--lr', type=float, default=0.01, help='Learning Rate.')
    parser.add_argument('--epochs', type=int, default=5, help='Total number of epochs to train')
    parser.add_argument('--print_every', type=int, default=100, help='Print iterations')
    parser.add_argument('--num_classes', type=int, default=10, help='Num classes')
    parser.add_argument('--type', choices=['CNN', 'MLP'], default = 'cnn', help='Type')
    args = parser.parse_args()
    train(args)